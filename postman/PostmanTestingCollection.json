{
	"info": {
		"_postman_id": "6161a362-b7df-4871-ae34-840197b818b5",
		"name": "API Testing",
		"description": "# üñáÔ∏è Get started here\n\nPostman's [scripting](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) feature allows you to build conditional workflows using a collection. You can branch and loop over a set of requests.\n\nThis template contains a sample conditional workflow for testing successful user creation across a data array.\n\nThe workflow is set to run in successive iterations with different values in each iteration. If the API returns a successful response in an iteration, the next iteration is triggered, and so on. You will get a report of successful user creations when all the iterations are successful. If a user creation fails, the loop is terminated, and you will get a report of the failed attempt.\n\n<img src=\"https://content.pstmn.io/d21cb133-1e04-41f6-9ef6-9aaf85df4e82/aW1hZ2UucG5n\" alt=\"Workflow%20depicting%20the%20collection%20execution\" width=\"638\" height=\"720\">\n\nThe [postman.setNextRequest()](https://learning.postman.com/docs/postman/scripts/branching-and-looping/) function enables you to change the order of requests in a collection while testing. This function allows you to conditionally skip specific requests, repeat requests, terminate the collection early, etc. You can use conditional workflows in various use cases, from [generating a Spotify playlist](https://blog.postman.com/generate-spotify-playlists-using-a-postman-collection/) to [checking your website for broken links](https://blog.postman.com/check-for-broken-links-on-your-website-using-a-postman-collection/).\n\n## üîñ **How to use this template**\n\n**Step 1:** Open the collection and click on the \"View more actions\" icon.\n\n**Step 2:** Click \"Run Collection\" to open the [collection runner](https://learning.postman.com/docs/running-collections/intro-to-collection-runs/).\n\n**Step 3:** Click on \"Run Conditional Workflow\" to run the collection.\n\n#### Modifying the data\n\nYou can find the data array in the collection variables section, which you can navigate to by clicking on the collection's name in the sidebar and then selecting the Variables tab.\n\nThe data array follows this structure:\n\n``` json\n[\n    {\n        \"username\": \"\",\n        \"name\": \"\",\n        \"role\": \"\"\n    },\n    ...\n]\n\n ```\n\n## üí°Related templates\n\n[Async operations](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=66c7f0e5-065a-4d08-9c7e-0825e9e29e24&sourceTemplateId=78475d97-9a36-4731-ab24-9adf6a94d0fb)  \n[Data visualization](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=c9e72d75-ded7-4135-a721-5d59ddda6d59&sourceTemplateId=78475d97-9a36-4731-ab24-9adf6a94d0fb)  \n[Integration testing](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=fe506090-ca91-4340-bea9-82d2c3d2bb9a&sourceTemplateId=78475d97-9a36-4731-ab24-9adf6a94d0fb)  \n[Reusing requests and scripts](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=0cb2db53-2dee-430b-a0cf-21f1dbb50bb1&sourceTemplateId=78475d97-9a36-4731-ab24-9adf6a94d0fb)  \n[Run collection with data file](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=6a8f6393-58ab-4458-944c-7fc8f08448da&sourceTemplateId=78475d97-9a36-4731-ab24-9adf6a94d0fb)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32069873",
		"_collection_link": "https://pim-swks.postman.co/workspace/PIM-SWKS-Workspace~f179b538-a66e-4cf5-88b2-242ab2e2ed52/collection/32069873-6161a362-b7df-4871-ae34-840197b818b5?action=share&source=collection_link&creator=32069873"
	},
	"item": [
		{
			"name": "Scenario Testing",
			"item": [
				{
					"name": "Creating and Retrieving a Post",
					"item": [
						{
							"name": "Create a new post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"title\", \"Hello World\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\", \"This is a post\");\r",
											"    pm.expect(jsonData).to.have.property(\"authorId\");\r",
											"\r",
											"    // Check the type of authorId\r",
											"    pm.expect(jsonData.authorId).to.be.a(\"number\");\r",
											"\r",
											"    // Save authorId as an environment variable\r",
											"    pm.collectionVariables.set(\"authorId\", jsonData.authorId);\r",
											"});\r",
											"\r",
											"// Save the post ID for the next request\r",
											"pm.collectionVariables.set(\"postId\", pm.response.json().id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const apiKey = pm.collectionVariables.get(\"apiKey\")\r",
											"\r",
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Generate a random username and email\r",
											"let username = generateRandomString(8); // Generate an 8-character random string\r",
											"let email = `${username}@example.com`;\r",
											"\r",
											"pm.collectionVariables.set(\"randomUsername\", username)\r",
											"pm.collectionVariables.set(\"randomEmail\", email)\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.globals.get(\"baseUrl\") + \"/users\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'X-API-KEY': apiKey\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"username\": username,\r",
											"            \"email\": email\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"        pm.collectionVariables.set(\"userId\", null);\r",
											"    } else {\r",
											"        console.log(\"Response:\", res);\r",
											"        try {\r",
											"            var jsonData = res.json();\r",
											"            pm.collectionVariables.set(\"userId\", jsonData.id);\r",
											"        } catch (e) {\r",
											"            console.log(\"Error parsing JSON:\", e);\r",
											"            console.log(\"Response body:\", res.text());\r",
											"            pm.collectionVariables.set(\"userId\", null);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-API-KEY",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Hello World\",\n  \"content\": \"This is a post\",\n  \"authorId\": {{userId}}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/posts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"response": [
								{
									"name": "Created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "WWW-Authenticate",
											"value": "<string>",
											"description": {
												"content": "The authentication method that should be used",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Returns a post by ID",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\", parseInt(pm.collectionVariables.get(\"postId\")));\r",
											"    pm.expect(jsonData).to.have.property(\"title\", \"Hello World\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\", \"This is a post\");\r",
											"    pm.expect(jsonData).to.have.property(\"authorId\", parseInt(pm.collectionVariables.get(\"userId\")));\r",
											"\r",
											"    // Check the type of authorId\r",
											"    pm.expect(jsonData.authorId).to.be.a(\"number\");\r",
											"\r",
											"    // Compare authorId with the saved variable\r",
											"    pm.expect(jsonData.authorId).to.eql(parseInt(pm.collectionVariables.get(\"authorId\")));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/posts/{{postId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts",
										"{{postId}}"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}"
								},
								{
									"name": "If the post does not exist",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Adding and Deleting a Comment",
					"item": [
						{
							"name": "Create a new comment for a post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\");\r",
											"    pm.expect(jsonData).to.have.property(\"content\", \"This is a comment\");\r",
											"    pm.expect(jsonData).to.have.property(\"authorId\", parseInt(pm.collectionVariables.get(\"userId\")));\r",
											"    pm.expect(jsonData).to.have.property(\"postId\", parseInt(pm.collectionVariables.get(\"postId\")));\r",
											"});\r",
											"\r",
											"// Save the comment ID for the next request\r",
											"pm.collectionVariables.set(\"commentId\", pm.response.json().id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random string of given length\r",
											"function generateRandomString(length) {\r",
											"    let result = '';\r",
											"    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    const charactersLength = characters.length;\r",
											"    for (let i = 0; i < length; i++) {\r",
											"        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"// Generate a random username and email\r",
											"let username = generateRandomString(8); // Generate an 8-character random string\r",
											"let email = `${username}@example.com`;\r",
											"\r",
											"pm.collectionVariables.set(\"randomUsername\", username)\r",
											"pm.collectionVariables.set(\"randomEmail\", email)\r",
											"\r",
											"\r",
											"// Create user\r",
											"pm.sendRequest({\r",
											"    url: pm.globals.get(\"baseUrl\") + \"/users\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"username\": username,\r",
											"            \"email\": email\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"        pm.collectionVariables.set(\"userId\", null);\r",
											"    } else {\r",
											"        console.log(\"Response:\", res);\r",
											"        try {\r",
											"            var jsonData = res.json();\r",
											"            pm.collectionVariables.set(\"userId\", jsonData.id);\r",
											"\r",
											"            // Create post with the newly created user\r",
											"            pm.sendRequest({\r",
											"                url: pm.globals.get(\"baseUrl\") + \"/posts\",\r",
											"                method: 'POST',\r",
											"                header: {\r",
											"                    'Content-Type': 'application/json',\r",
											"                    'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
											"                },\r",
											"                body: {\r",
											"                    mode: 'raw',\r",
											"                    raw: JSON.stringify({\r",
											"                        \"title\": \"Hello World\",\r",
											"                        \"content\": \"This is a post\",\r",
											"                        \"authorId\": jsonData.id\r",
											"                    })\r",
											"                }\r",
											"            }, function (err, res) {\r",
											"                if (err) {\r",
											"                    console.log(err);\r",
											"                    pm.collectionVariables.set(\"postId\", null);\r",
											"                } else {\r",
											"                    console.log(\"Response:\", res);\r",
											"                    try {\r",
											"                        var postData = res.json();\r",
											"                        pm.collectionVariables.set(\"postId\", postData.id);\r",
											"                    } catch (e) {\r",
											"                        console.log(\"Error parsing JSON:\", e);\r",
											"                        console.log(\"Response body:\", res.text());\r",
											"                        pm.collectionVariables.set(\"postId\", null);\r",
											"                    }\r",
											"                }\r",
											"            });\r",
											"\r",
											"        } catch (e) {\r",
											"            console.log(\"Error parsing JSON:\", e);\r",
											"            console.log(\"Response body:\", res.text());\r",
											"            pm.collectionVariables.set(\"userId\", null);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-API-KEY",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"content\": \"This is a comment\",\n  \"authorId\": {{userId}},\n  \"postId\": {{postId}}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/posts/{{postId}}/comments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts",
										"{{postId}}",
										"comments"
									]
								}
							},
							"response": [
								{
									"name": "Created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/:id/comments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id",
												"comments"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/:id/comments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id",
												"comments"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "WWW-Authenticate",
											"value": "<string>",
											"description": {
												"content": "The authentication method that should be used",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/:id/comments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id",
												"comments"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "If the post does not exist",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/:id/comments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id",
												"comments"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a comment by ID for a post",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Response has correct fields\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData).to.have.property(\"id\", parseInt(pm.collectionVariables.get(\"commentId\")));\r",
											"    pm.expect(jsonData).to.have.property(\"content\", \"This is a comment\");\r",
											"    pm.expect(jsonData).to.have.property(\"authorId\", parseInt(pm.collectionVariables.get(\"userId\")));\r",
											"    pm.expect(jsonData).to.have.property(\"postId\", parseInt(pm.collectionVariables.get(\"postId\")));\r",
											"});\r",
											"\r",
											"// Verify the comment is deleted\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.globals.get(\"baseUrl\") + \"/posts/\" + pm.collectionVariables.get(\"postId\") + \"/comments/\" + pm.collectionVariables.get(\"commentId\"),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"    } else {\r",
											"        pm.test(\"Comment should be deleted\", function () {\r",
											"            pm.expect(res).to.have.status(404);\r",
											"        });\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "key",
											"value": "X-API-KEY",
											"type": "string"
										},
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/posts/{{postId}}/comments/{{commentId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts",
										"{{postId}}",
										"comments",
										"{{commentId}}"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/posts/:postId/comments/:commentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":postId",
												"comments",
												":commentId"
											],
											"variable": [
												{
													"key": "postId"
												},
												{
													"key": "commentId"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/posts/:postId/comments/:commentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":postId",
												"comments",
												":commentId"
											],
											"variable": [
												{
													"key": "postId"
												},
												{
													"key": "commentId"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "WWW-Authenticate",
											"value": "<string>",
											"description": {
												"content": "The authentication method that should be used",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/posts/:postId/comments/:commentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":postId",
												"comments",
												":commentId"
											],
											"variable": [
												{
													"key": "postId"
												},
												{
													"key": "commentId"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "If the post or comment does not exist",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/posts/:postId/comments/:commentId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":postId",
												"comments",
												":commentId"
											],
											"variable": [
												{
													"key": "postId"
												},
												{
													"key": "commentId"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				},
				{
					"name": "Authorization Scenario",
					"item": [
						{
							"name": "Create a new post without authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"// Function to generate a random username\r",
											"function generateRandomUsername() {\r",
											"    const characters = 'abcdefghijklmnopqrstuvwxyz0123456789';\r",
											"    let username = '';\r",
											"    for (let i = 0; i < 10; i++) {\r",
											"        username += characters.charAt(Math.floor(Math.random() * characters.length));\r",
											"    }\r",
											"    return username;\r",
											"}\r",
											"\r",
											"// Generate random username and email\r",
											"const username = generateRandomUsername();\r",
											"const email = username + \"@example.com\";\r",
											"\r",
											"// Log the generated username and email for debugging\r",
											"console.log(\"Generated username:\", username);\r",
											"console.log(\"Generated email:\", email);\r",
											"\r",
											"// Create user\r",
											"pm.sendRequest({\r",
											"    url: pm.globals.get(\"baseUrl\") + \"/users\",\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            \"username\": username,\r",
											"            \"email\": email\r",
											"        })\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"        pm.collectionVariables.set(\"userId\", null);\r",
											"    } else {\r",
											"        console.log(\"Response:\", res);\r",
											"        try {\r",
											"            var jsonData = res.json();\r",
											"            pm.collectionVariables.set(\"userId\", jsonData.id);\r",
											"        } catch (e) {\r",
											"            console.log(\"Error parsing JSON:\", e);\r",
											"            console.log(\"Response body:\", res.text());\r",
											"            pm.collectionVariables.set(\"userId\", null);\r",
											"        }\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Unauthorized Post\",\n  \"content\": \"This should fail\",\n  \"authorId\": {{userId}}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/posts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"response": [
								{
									"name": "Created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "WWW-Authenticate",
											"value": "<string>",
											"description": {
												"content": "The authentication method that should be used",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Create a new post with authorization",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-API-KEY",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Authorized Post\",\n  \"content\": \"This should succeed\",\n  \"authorId\": {{userId}}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/posts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts"
									]
								}
							},
							"response": [
								{
									"name": "Created",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts"
											]
										}
									},
									"status": "Created",
									"code": 201,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts"
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "WWW-Authenticate",
											"value": "<string>",
											"description": {
												"content": "The authentication method that should be used",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a post by ID without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Unauthorized Update\",\n  \"content\": \"This should fail\",\n  \"authorId\": {{userId}}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/posts/{{postId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts",
										"{{postId}}"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "WWW-Authenticate",
											"value": "<string>",
											"description": {
												"content": "The authentication method that should be used",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "If the post does not exist",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Update a post by ID with auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-API-KEY",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Unauthorized Update\",\n  \"content\": \"This should fail\",\n  \"authorId\": {{userId}}\n}",
									"options": {
										"raw": {
											"headerFamily": "json",
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/posts/{{postId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts",
										"{{postId}}"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "WWW-Authenticate",
											"value": "<string>",
											"description": {
												"content": "The authentication method that should be used",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "If the post does not exist",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a post by ID without auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"// Verify the post still exists\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.globals.get(\"baseUrl\") + \"/posts/\" + pm.collectionVariables.get(\"postId\"),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"    } else {\r",
											"        pm.test(\"Post should still exist\", function () {\r",
											"            pm.expect(res).to.have.status(200);\r",
											"        });\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/posts/{{postId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts",
										"{{postId}}"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "WWW-Authenticate",
											"value": "<string>",
											"description": {
												"content": "The authentication method that should be used",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "If the post does not exist",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						},
						{
							"name": "Delete a post by ID with auth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.sendRequest({\r",
											"    url: pm.globals.get(\"baseUrl\") + \"/posts/\" + pm.collectionVariables.get(\"postId\"),\r",
											"    method: 'GET',\r",
											"    header: {\r",
											"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
											"    }\r",
											"}, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(err);\r",
											"    } else {\r",
											"        pm.test(\"Post should be deleted\", function () {\r",
											"            pm.expect(res).to.have.status(404);\r",
											"        });\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "{{apiKey}}",
											"type": "string"
										},
										{
											"key": "key",
											"value": "X-API-KEY",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/posts/{{postId}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"posts",
										"{{postId}}"
									]
								}
							},
							"response": [
								{
									"name": "OK",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n  \"id\": \"<integer>\",\n  \"title\": \"<string>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\"\n}"
								},
								{
									"name": "Unauthorized",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Unauthorized",
									"code": 401,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "WWW-Authenticate",
											"value": "<string>",
											"description": {
												"content": "The authentication method that should be used",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								},
								{
									"name": "If the post does not exist",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"key": "X-API-KEY",
												"value": "<API Key>",
												"description": "Added as a part of security scheme: apikey"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/posts/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												":id"
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "text",
									"header": [],
									"cookie": [],
									"body": ""
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Endpoint Monitoring",
			"item": [
				{
					"name": "POST",
					"item": [
						{
							"name": "Create a new user",
							"item": [
								{
									"name": "Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has the correct structure\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"id\");\r",
													"    pm.expect(jsonData).to.have.property(\"username\", pm.collectionVariables.get(\"randomUsername\"));\r",
													"    pm.expect(jsonData).to.have.property(\"email\", pm.collectionVariables.get(\"randomEmail\"));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"{{randomUsername}}\",\r\n  \"email\": \"{{randomEmail}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "BadKey",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-API-KEY",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"{{randomUsername}}\",\r\n  \"email\": \"{{randomEmail}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": [
										{
											"name": "Created Copy",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-API-KEY",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"username\": \"DMraLc4Rwx-Wp1.mcMXyhoYVzy\",\n  \"email\": \"<email>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<integer>\",\n  \"username\": \"DMraLc4Rwx-Wp1.mcMXyhoYVzy\",\n  \"email\": \"<email>\"\n}"
										},
										{
											"name": "Unauthorized Copy",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-API-KEY",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"username\": \"DMraLc4Rwx-Wp1.mcMXyhoYVzy\",\n  \"email\": \"<email>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "WWW-Authenticate",
													"value": "<string>",
													"description": {
														"content": "The authentication method that should be used",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Forbidden Copy",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-API-KEY",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"username\": \"DMraLc4Rwx-Wp1.mcMXyhoYVzy\",\n  \"email\": \"<email>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Bad Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"BadUser\",\r\n  \"email\": \"bad\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create a new post",
							"item": [
								{
									"name": "Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"pm.collectionVariables.set(\"randomUsername\", randomUsername);\r",
													"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
													"\r",
													"var userCreationRequest = {\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"};\r",
													"\r",
													"pm.sendRequest(userCreationRequest, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(err);\r",
													"    } else {\r",
													"        var jsonData = res.json();\r",
													"        pm.collectionVariables.set(\"userId\", jsonData.id);\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has the correct structure\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"id\");\r",
													"    pm.expect(jsonData).to.have.property(\"title\", \"My First Post\");\r",
													"    pm.expect(jsonData).to.have.property(\"content\", \"This is the content of my first post.\");\r",
													"    pm.expect(jsonData).to.have.property(\"authorId\", parseInt(pm.collectionVariables.get(\"userId\")));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"My First Post\",\r\n  \"content\": \"This is the content of my first post.\",\r\n  \"authorId\": {{userId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Bad Request",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"This post has no title\",\r\n  \"authorId\": {{userId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "badKey",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"My First Post\",\r\n  \"content\": \"This is the content of my first post.\",\r\n  \"authorId\": {{userId}}\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Create a new comment",
							"item": [
								{
									"name": "Prerequest",
									"item": [
										{
											"name": "create dummy post",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript",
														"packages": {}
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"if (pm.response.code === 201) {\r",
															"    var postData = pm.response.json();\r",
															"    pm.collectionVariables.set(\"postId\", postData.id);\r",
															"    console.log(postData.id)\r",
															"} else {\r",
															"    pm.collectionVariables.unset(\"postId\");\r",
															"    console.log(\"Failed to create post\");\r",
															"}"
														],
														"type": "text/javascript",
														"packages": {}
													}
												}
											],
											"request": {
												"auth": {
													"type": "apikey",
													"apikey": [
														{
															"key": "value",
															"value": "{{apiKey}}",
															"type": "string"
														},
														{
															"key": "key",
															"value": "X-API-KEY",
															"type": "string"
														},
														{
															"key": "in",
															"value": "header",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"title\": \"Post for Comment\",\r\n  \"content\": \"This post is for testing comment creation.\",\r\n  \"authorId\": {{userId}}\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/posts",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Success",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"pm.test(\"Response has the correct structure\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"id\");\r",
													"    pm.expect(jsonData).to.have.property(\"content\", \"This is a comment on the post.\");\r",
													"    pm.expect(jsonData).to.have.property(\"authorId\", parseInt(pm.collectionVariables.get(\"userId\")));\r",
													"    pm.expect(jsonData).to.have.property(\"postId\", parseInt(pm.collectionVariables.get(\"postId\")));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "X-API-KEY",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"content\": \"This is a comment on the post.\",\n  \"authorId\": {{userId}}\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}/comments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}",
												"comments"
											]
										}
									},
									"response": [
										{
											"name": "Created",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-API-KEY",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/posts/:id/comments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts",
														":id",
														"comments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-API-KEY",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/posts/:id/comments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts",
														":id",
														"comments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "WWW-Authenticate",
													"value": "<string>",
													"description": {
														"content": "The authentication method that should be used",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-API-KEY",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/posts/:id/comments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts",
														":id",
														"comments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "If the post does not exist",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-API-KEY",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/posts/:id/comments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts",
														":id",
														"comments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Unauthorized",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "BadKey",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-API-KEY",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"content\": \"This is a comment on the post.\",\n  \"authorId\": {{userId}}\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}/comments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}",
												"comments"
											]
										}
									},
									"response": [
										{
											"name": "Created",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-API-KEY",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/posts/:id/comments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts",
														":id",
														"comments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-API-KEY",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/posts/:id/comments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts",
														":id",
														"comments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "WWW-Authenticate",
													"value": "<string>",
													"description": {
														"content": "The authentication method that should be used",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-API-KEY",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/posts/:id/comments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts",
														":id",
														"comments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "If the post does not exist",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-API-KEY",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/posts/:id/comments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts",
														":id",
														"comments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								},
								{
									"name": "Bad Request",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "key",
													"value": "X-API-KEY",
													"type": "string"
												},
												{
													"key": "value",
													"value": "{{apiKey}}",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"authorId\": {{userId}}\n}",
											"options": {
												"raw": {
													"headerFamily": "json",
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}/comments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}",
												"comments"
											]
										}
									},
									"response": [
										{
											"name": "Created",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Accept",
														"value": "application/json"
													},
													{
														"key": "X-API-KEY",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/posts/:id/comments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts",
														":id",
														"comments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Created",
											"code": 201,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}"
										},
										{
											"name": "Unauthorized",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-API-KEY",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/posts/:id/comments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts",
														":id",
														"comments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Unauthorized",
											"code": 401,
											"_postman_previewlanguage": "text",
											"header": [
												{
													"key": "WWW-Authenticate",
													"value": "<string>",
													"description": {
														"content": "The authentication method that should be used",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": ""
										},
										{
											"name": "Forbidden",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-API-KEY",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/posts/:id/comments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts",
														":id",
														"comments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										},
										{
											"name": "If the post does not exist",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "X-API-KEY",
														"value": "<API Key>",
														"description": "Added as a part of security scheme: apikey"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"id\": \"<integer>\",\n  \"content\": \"<string>\",\n  \"authorId\": \"<integer>\",\n  \"postId\": \"<integer>\"\n}",
													"options": {
														"raw": {
															"headerFamily": "json",
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/posts/:id/comments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"posts",
														":id",
														"comments"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "text",
											"header": [],
											"cookie": [],
											"body": ""
										}
									]
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											"function generateRandomString(length) {\r",
											"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
											"    var result = '';\r",
											"    for (var i = 0; i < length; i++) {\r",
											"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
											"    }\r",
											"    return result;\r",
											"}\r",
											"\r",
											"var randomUsername = generateRandomString(8);\r",
											"var randomEmail = randomUsername + '@example.com';\r",
											"\r",
											"pm.collectionVariables.set(\"randomUsername\", randomUsername);\r",
											"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
											"\r",
											"// Step 1: Create a User\r",
											"var userCreationRequest = {\r",
											"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
											"    method: 'POST',\r",
											"    header: {\r",
											"        'Content-Type': 'application/json',\r",
											"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
											"    },\r",
											"    body: {\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify({\r",
											"            username: randomUsername,\r",
											"            email: randomEmail\r",
											"        })\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(userCreationRequest, function (err, res) {\r",
											"    if (err) {\r",
											"        console.log(\"Error creating user:\", err);\r",
											"    } else {\r",
											"        var userData = res.json();\r",
											"        pm.collectionVariables.set(\"userId\", userData.id);\r",
											"    }\r",
											"});\r",
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						}
					]
				},
				{
					"name": "GET",
					"item": [
						{
							"name": "Return all users",
							"item": [
								{
									"name": "Empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response is an empty array\r",
													"pm.test(\"Response is an empty array\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\").that.is.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Function to delete a user's posts before deleting the user\r",
													"function deleteUserWithPosts(user) {\r",
													"    // Fetch all posts for the user\r",
													"    pm.sendRequest({\r",
													"        url: pm.globals.get(\"baseUrl\") + '/posts?authorId=' + user.id,\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"        }\r",
													"    }, function (err, res) {\r",
													"        if (err) {\r",
													"            console.log(\"Error fetching posts for user ID \" + user.id + \":\", err);\r",
													"        } else {\r",
													"            var posts = res.json();\r",
													"            console.log(\"Fetched \" + posts.length + \" posts for user ID \" + user.id);\r",
													"\r",
													"            // Delete each post associated with the user\r",
													"            var deletePostPromises = posts.map(function(post) {\r",
													"                return new Promise(function(resolve, reject) {\r",
													"                    pm.sendRequest({\r",
													"                        url: pm.globals.get(\"baseUrl\") + '/posts/' + post.id,\r",
													"                        method: 'DELETE',\r",
													"                        header: {\r",
													"                            'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                        }\r",
													"                    }, function (err, res) {\r",
													"                        if (err) {\r",
													"                            console.log(\"Error deleting post ID \" + post.id + \":\", err);\r",
													"                            reject(err);\r",
													"                        } else {\r",
													"                            console.log(\"Deleted post ID \" + post.id);\r",
													"                            resolve();\r",
													"                        }\r",
													"                    });\r",
													"                });\r",
													"            });\r",
													"\r",
													"            // After all posts are deleted, delete the user\r",
													"            Promise.all(deletePostPromises)\r",
													"                .then(function() {\r",
													"                    // Now delete the user\r",
													"                    pm.sendRequest({\r",
													"                        url: pm.globals.get(\"baseUrl\") + '/users/' + user.id,\r",
													"                        method: 'DELETE',\r",
													"                        header: {\r",
													"                            'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                        }\r",
													"                    }, function (err, res) {\r",
													"                        if (err) {\r",
													"                            console.log(\"Error deleting user ID \" + user.id + \":\", err);\r",
													"                        } else if (res.code === 200 || res.code === 204) {\r",
													"                            console.log(\"User with ID \" + user.id + \" deleted successfully.\");\r",
													"                        } else {\r",
													"                            console.log(\"Failed to delete user with ID \" + user.id);\r",
													"                        }\r",
													"                    });\r",
													"                })\r",
													"                .catch(function(err) {\r",
													"                    console.log(\"Error deleting posts for user ID \" + user.id + \":\", err);\r",
													"                });\r",
													"        }\r",
													"    });\r",
													"}\r",
													"\r",
													"// Fetch all users\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        var users = res.json();\r",
													"        console.log(\"Fetched \" + users.length + \" users.\");\r",
													"        \r",
													"        // Delete each user and their associated posts\r",
													"        users.forEach(function(user) {\r",
													"            deleteUserWithPosts(user);\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "OneUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response is an array\r",
													"pm.test(\"Response is an array\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\");\r",
													"});\r",
													"\r",
													"// Test to check if the array contains user objects\r",
													"pm.test(\"Each item in the array is a user object\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    jsonData.forEach(function (user) {\r",
													"        pm.expect(user).to.have.property(\"id\");\r",
													"        pm.expect(user).to.have.property(\"username\");\r",
													"        pm.expect(user).to.have.property(\"email\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate a random string function\r",
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Set up the request to get all users\r",
													"var getAllUsersRequest = {\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    }\r",
													"};\r",
													"\r",
													"// Send the request to get all users\r",
													"pm.sendRequest(getAllUsersRequest, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        var users = res.json();\r",
													"        if (users.length === 0) {\r",
													"            pm.collectionVariables.set(\"randomUsername\", randomUsername);\r",
													"            pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
													"\r",
													"            var createUserRequest = {\r",
													"                url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                },\r",
													"                body: {\r",
													"                    mode: 'raw',\r",
													"                    raw: JSON.stringify({\r",
													"                        username: randomUsername,\r",
													"                        email: randomEmail\r",
													"                    })\r",
													"                }\r",
													"            };\r",
													"\r",
													"            pm.sendRequest(createUserRequest, function (err, res) {\r",
													"                if (err) {\r",
													"                    console.log(\"Error creating user:\", err);\r",
													"                } else {\r",
													"                    console.log(\"User created successfully\");\r",
													"                }\r",
													"            });\r",
													"        }\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "MultipleUsers",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response is an array\r",
													"pm.test(\"Response is an array\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\");\r",
													"});\r",
													"\r",
													"// Test to check if the array contains at least the required number of user objects\r",
													"pm.test(\"Response contains the correct number of users\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.length).to.be.at.least(5); // Adjust this number to match requiredUsersCount\r",
													"});\r",
													"\r",
													"// Test to check if the array contains user objects with correct properties\r",
													"pm.test(\"Each item in the array is a user object with expected properties\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    jsonData.forEach(function (user) {\r",
													"        pm.expect(user).to.have.property(\"id\");\r",
													"        pm.expect(user).to.have.property(\"username\");\r",
													"        pm.expect(user).to.have.property(\"email\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Set the desired number of users\r",
													"var requiredUsersCount = 5; // Change this value to control the number of users you want\r",
													"\r",
													"// Set up the request to get all users\r",
													"var getAllUsersRequest = {\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    }\r",
													"};\r",
													"\r",
													"// Send the request to get all users\r",
													"pm.sendRequest(getAllUsersRequest, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        var users = res.json();\r",
													"        var usersToCreate = requiredUsersCount - users.length;\r",
													"\r",
													"        if (usersToCreate > 0) {\r",
													"            for (var i = 0; i < usersToCreate; i++) {\r",
													"                var randomUsername = generateRandomString(8);\r",
													"                var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"                pm.collectionVariables.set(\"randomUsername\", randomUsername);\r",
													"                pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
													"\r",
													"                var createUserRequest = {\r",
													"                    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"                    method: 'POST',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                    },\r",
													"                    body: {\r",
													"                        mode: 'raw',\r",
													"                        raw: JSON.stringify({\r",
													"                            username: randomUsername,\r",
													"                            email: randomEmail\r",
													"                        })\r",
													"                    }\r",
													"                };\r",
													"\r",
													"                pm.sendRequest(createUserRequest, function (err, res) {\r",
													"                    if (err) {\r",
													"                        console.log(\"Error creating user:\", err);\r",
													"                    } else {\r",
													"                        console.log(\"User created successfully.\");\r",
													"                    }\r",
													"                });\r",
													"            }\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"packages": {},
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "Returns a users by ID",
							"item": [
								{
									"name": "Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate a random string function\r",
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Set up the request to get all users\r",
													"var getAllUsersRequest = {\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    }\r",
													"};\r",
													"\r",
													"// Send the request to get all users\r",
													"pm.sendRequest(getAllUsersRequest, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        var users = res.json();\r",
													"        if (users.length === 0) {\r",
													"            // No users exist, so create a new one\r",
													"            var randomUsername = generateRandomString(8);\r",
													"            var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"            pm.collectionVariables.set(\"randomUsername\", randomUsername);\r",
													"            pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
													"\r",
													"            var createUserRequest = {\r",
													"                url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                },\r",
													"                body: {\r",
													"                    mode: 'raw',\r",
													"                    raw: JSON.stringify({\r",
													"                        username: randomUsername,\r",
													"                        email: randomEmail\r",
													"                    })\r",
													"                }\r",
													"            };\r",
													"\r",
													"            pm.sendRequest(createUserRequest, function (err, res) {\r",
													"                if (err) {\r",
													"                    console.log(\"Error creating user:\", err);\r",
													"                } else {\r",
													"                    var userData = res.json();\r",
													"                    pm.collectionVariables.set(\"userId\", userData.id);\r",
													"                }\r",
													"            });\r",
													"        } else {\r",
													"            // If users exist, use the first one\r",
													"            pm.collectionVariables.set(\"userId\", users[0].id);\r",
													"        }\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response contains the correct user object\r",
													"pm.test(\"Response contains the correct user object\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"id\", parseInt(pm.collectionVariables.get(\"userId\")));\r",
													"    pm.expect(jsonData).to.have.property(\"username\");\r",
													"    pm.expect(jsonData).to.have.property(\"email\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/{{userId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Doesnt Exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/99999999",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"99999999"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Returns all posts",
							"item": [
								{
									"name": "NoPosts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Fetch all posts\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching posts:\", err);\r",
													"    } else {\r",
													"        var posts = res.json();\r",
													"        // Iterate over posts and delete each one\r",
													"        posts.forEach(function (post) {\r",
													"            pm.sendRequest({\r",
													"                url: pm.globals.get(\"baseUrl\") + '/posts/' + post.id,\r",
													"                method: 'DELETE',\r",
													"                header: {\r",
													"                    'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                }\r",
													"            }, function (err, res) {\r",
													"                if (err) {\r",
													"                    console.log(\"Error deleting post:\", err);\r",
													"                } else {\r",
													"                    console.log(\"Post with ID \" + post.id + \" deleted successfully.\");\r",
													"                }\r",
													"            });\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response is an empty array\r",
													"pm.test(\"Response is an empty array\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\").that.is.empty;\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "OnePost",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate a random string function\r",
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        var randomTitle = \"Post \" + generateRandomString(5);\r",
													"        var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                console.log(\"One post created successfully.\");\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response contains exactly one post\r",
													"pm.test(\"Response contains exactly one post\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\").that.has.lengthOf(1);\r",
													"});\r",
													"\r",
													"// Test to check if the post object has the correct properties\r",
													"pm.test(\"Post object has expected properties\", function () {\r",
													"    var jsonData = pm.response.json()[0];\r",
													"    pm.expect(jsonData).to.have.property(\"id\");\r",
													"    pm.expect(jsonData).to.have.property(\"title\");\r",
													"    pm.expect(jsonData).to.have.property(\"content\");\r",
													"    pm.expect(jsonData).to.have.property(\"authorId\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts"
											]
										}
									},
									"response": []
								},
								{
									"name": "MultiplePosts",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate a random string function\r",
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Set the desired number of posts\r",
													"var requiredPostsCount = 5; // Change this value to control the number of posts you want\r",
													"\r",
													"// Ensure there's a user available to assign as the author\r",
													"var getAllUsersRequest = {\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    }\r",
													"};\r",
													"\r",
													"// Send the request to get all users\r",
													"pm.sendRequest(getAllUsersRequest, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error fetching users:\", err);\r",
													"    } else {\r",
													"        var users = res.json();\r",
													"        var userId;\r",
													"\r",
													"        if (users.length === 0) {\r",
													"            // No users exist, so create a new one\r",
													"            var randomUsername = generateRandomString(8);\r",
													"            var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"            var createUserRequest = {\r",
													"                url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"                method: 'POST',\r",
													"                header: {\r",
													"                    'Content-Type': 'application/json',\r",
													"                    'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                },\r",
													"                body: {\r",
													"                    mode: 'raw',\r",
													"                    raw: JSON.stringify({\r",
													"                        username: randomUsername,\r",
													"                        email: randomEmail\r",
													"                    })\r",
													"                }\r",
													"            };\r",
													"\r",
													"            pm.sendRequest(createUserRequest, function (err, res) {\r",
													"                if (err) {\r",
													"                    console.log(\"Error creating user:\", err);\r",
													"                } else {\r",
													"                    userId = res.json().id;\r",
													"                    pm.collectionVariables.set(\"userId\", userId);\r",
													"                    ensurePostsExist(userId);\r",
													"                }\r",
													"            });\r",
													"        } else {\r",
													"            // If users exist, use the first one\r",
													"            userId = users[0].id;\r",
													"            pm.collectionVariables.set(\"userId\", userId);\r",
													"            ensurePostsExist(userId);\r",
													"        }\r",
													"    }\r",
													"});\r",
													"\r",
													"// Function to ensure there are enough posts\r",
													"function ensurePostsExist(userId) {\r",
													"    var getAllPostsRequest = {\r",
													"        url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"        method: 'GET',\r",
													"        header: {\r",
													"            'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"        }\r",
													"    };\r",
													"\r",
													"    pm.sendRequest(getAllPostsRequest, function (err, res) {\r",
													"        if (err) {\r",
													"            console.log(\"Error fetching posts:\", err);\r",
													"        } else {\r",
													"            var posts = res.json();\r",
													"            var postsToCreate = requiredPostsCount - posts.length;\r",
													"\r",
													"            if (postsToCreate > 0) {\r",
													"                for (var i = 0; i < postsToCreate; i++) {\r",
													"                    var randomTitle = \"Post \" + generateRandomString(5);\r",
													"                    var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"                    var createPostRequest = {\r",
													"                        url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"                        method: 'POST',\r",
													"                        header: {\r",
													"                            'Content-Type': 'application/json',\r",
													"                            'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                        },\r",
													"                        body: {\r",
													"                            mode: 'raw',\r",
													"                            raw: JSON.stringify({\r",
													"                                title: randomTitle,\r",
													"                                content: randomContent,\r",
													"                                authorId: userId\r",
													"                            })\r",
													"                        }\r",
													"                    };\r",
													"\r",
													"                    pm.sendRequest(createPostRequest, function (err, res) {\r",
													"                        if (err) {\r",
													"                            console.log(\"Error creating post:\", err);\r",
													"                        } else {\r",
													"                            console.log(\"Post created successfully.\");\r",
													"                        }\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        }\r",
													"    });\r",
													"}\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response is an array\r",
													"pm.test(\"Response is an array\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\");\r",
													"});\r",
													"\r",
													"// Test to check if the array contains at least the required number of post objects\r",
													"pm.test(\"Response contains the correct number of posts\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData.length).to.be.at.least(5); // Adjust this number to match requiredPostsCount\r",
													"});\r",
													"\r",
													"// Test to check if the array contains post objects with correct properties\r",
													"pm.test(\"Each item in the array is a post object with expected properties\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    jsonData.forEach(function (post) {\r",
													"        pm.expect(post).to.have.property(\"id\");\r",
													"        pm.expect(post).to.have.property(\"title\");\r",
													"        pm.expect(post).to.have.property(\"content\");\r",
													"        pm.expect(post).to.have.property(\"authorId\");\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Returns a post by ID",
							"item": [
								{
									"name": "Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        var randomTitle = \"Post \" + generateRandomString(5);\r",
													"        var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"                pm.collectionVariables.set(\"postId\", postId);\r",
													"                console.log(\"Post created successfully with ID:\", postId);\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response contains the correct post object\r",
													"pm.test(\"Response contains the correct post object\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"id\", parseInt(pm.collectionVariables.get(\"postId\")));\r",
													"    pm.expect(jsonData).to.have.property(\"title\");\r",
													"    pm.expect(jsonData).to.have.property(\"content\");\r",
													"    pm.expect(jsonData).to.have.property(\"authorId\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Doesnt Exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts/9999999",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"9999999"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Returns all comments for a post",
							"item": [
								{
									"name": "NoComments",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate a random string function\r",
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        var randomTitle = \"Post \" + generateRandomString(5);\r",
													"        var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"                pm.collectionVariables.set(\"postId\", postId);\r",
													"                console.log(\"Post created successfully with no comments.\");\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response is an empty array\r",
													"pm.test(\"Response is an empty array\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\").that.is.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}/comments?limit=50",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}",
												"comments"
											],
											"query": [
												{
													"key": "limit",
													"value": "50"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "OneComment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate a random string function\r",
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        var randomTitle = \"Post \" + generateRandomString(5);\r",
													"        var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"                pm.collectionVariables.set(\"postId\", postId);\r",
													"\r",
													"                // Step 3: Create a comment on the post\r",
													"                var randomComment = \"Comment \" + generateRandomString(5);\r",
													"\r",
													"                pm.sendRequest({\r",
													"                    url: pm.globals.get(\"baseUrl\") + '/posts/' + postId + '/comments',\r",
													"                    method: 'POST',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                    },\r",
													"                    body: {\r",
													"                        mode: 'raw',\r",
													"                        raw: JSON.stringify({\r",
													"                            content: randomComment,\r",
													"                            authorId: userId\r",
													"                        })\r",
													"                    }\r",
													"                }, function (err, res) {\r",
													"                    if (err) {\r",
													"                        console.log(\"Error creating comment:\", err);\r",
													"                    } else {\r",
													"                        console.log(\"One comment created successfully.\");\r",
													"                    }\r",
													"                });\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response contains exactly one comment\r",
													"pm.test(\"Response contains exactly one comment\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\").that.has.lengthOf(1);\r",
													"});\r",
													"\r",
													"// Test to check if the comment object has the correct properties\r",
													"pm.test(\"Comment object has expected properties\", function () {\r",
													"    var jsonData = pm.response.json()[0];\r",
													"    pm.expect(jsonData).to.have.property(\"id\");\r",
													"    pm.expect(jsonData).to.have.property(\"content\");\r",
													"    pm.expect(jsonData).to.have.property(\"authorId\");\r",
													"    pm.expect(jsonData).to.have.property(\"postId\", parseInt(pm.collectionVariables.get(\"postId\")));\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}/comments?limit=50",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}",
												"comments"
											],
											"query": [
												{
													"key": "limit",
													"value": "50"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "MultipleComments",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Generate a random string function\r",
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        var randomTitle = \"Post \" + generateRandomString(5);\r",
													"        var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"                pm.collectionVariables.set(\"postId\", postId);\r",
													"\r",
													"                // Step 3: Create multiple comments on the post\r",
													"                for (var i = 0; i < 3; i++) {\r",
													"                    var randomComment = \"Comment \" + generateRandomString(5);\r",
													"\r",
													"                    pm.sendRequest({\r",
													"                        url: pm.globals.get(\"baseUrl\") + '/posts/' + postId + '/comments',\r",
													"                        method: 'POST',\r",
													"                        header: {\r",
													"                            'Content-Type': 'application/json',\r",
													"                            'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                        },\r",
													"                        body: {\r",
													"                            mode: 'raw',\r",
													"                            raw: JSON.stringify({\r",
													"                                content: randomComment,\r",
													"                                authorId: userId\r",
													"                            })\r",
													"                        }\r",
													"                    }, function (err, res) {\r",
													"                        if (err) {\r",
													"                            console.log(\"Error creating comment:\", err);\r",
													"                        } else {\r",
													"                            console.log(\"Comment created successfully.\");\r",
													"                        }\r",
													"                    });\r",
													"                }\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response contains multiple comments\r",
													"pm.test(\"Response contains multiple comments\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\").that.has.lengthOf.at.least(3);\r",
													"});\r",
													"\r",
													"// Test to check if each comment object has the correct properties\r",
													"pm.test(\"Each comment object has expected properties\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    jsonData.forEach(function (comment) {\r",
													"        pm.expect(comment).to.have.property(\"id\");\r",
													"        pm.expect(comment).to.have.property(\"content\");\r",
													"        pm.expect(comment).to.have.property(\"authorId\");\r",
													"        pm.expect(comment).to.have.property(\"postId\", parseInt(pm.collectionVariables.get(\"postId\")));\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}/comments?limit=50",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}",
												"comments"
											],
											"query": [
												{
													"key": "limit",
													"value": "50"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Returns all comments authored by user",
							"item": [
								{
									"name": "NoComments",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"        console.log(\"User created successfully with no comments.\");\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response is an empty array\r",
													"pm.test(\"Response is an empty array\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\").that.is.empty;\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/{{userId}}/comments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "OneComment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        var randomTitle = \"Post \" + generateRandomString(5);\r",
													"        var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"\r",
													"                // Step 3: Create a comment authored by the user\r",
													"                var randomComment = \"Comment \" + generateRandomString(5);\r",
													"\r",
													"                pm.sendRequest({\r",
													"                    url: pm.globals.get(\"baseUrl\") + '/posts/' + postId + '/comments',\r",
													"                    method: 'POST',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                    },\r",
													"                    body: {\r",
													"                        mode: 'raw',\r",
													"                        raw: JSON.stringify({\r",
													"                            content: randomComment,\r",
													"                            authorId: userId\r",
													"                        })\r",
													"                    }\r",
													"                }, function (err, res) {\r",
													"                    if (err) {\r",
													"                        console.log(\"Error creating comment:\", err);\r",
													"                    } else {\r",
													"                        console.log(\"One comment authored by the user created successfully.\");\r",
													"                    }\r",
													"                });\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response contains exactly one comment\r",
													"pm.test(\"Response contains exactly one comment\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\").that.has.lengthOf(1);\r",
													"});\r",
													"\r",
													"// Test to check if the comment object has the correct properties\r",
													"pm.test(\"Comment object has expected properties\", function () {\r",
													"    var jsonData = pm.response.json()[0];\r",
													"    pm.expect(jsonData).to.have.property(\"id\");\r",
													"    pm.expect(jsonData).to.have.property(\"content\");\r",
													"    pm.expect(jsonData).to.have.property(\"authorId\", parseInt(pm.collectionVariables.get(\"userId\")));\r",
													"    pm.expect(jsonData).to.have.property(\"postId\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/{{userId}}/comments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"comments"
											]
										}
									},
									"response": []
								},
								{
									"name": "MultipleComments",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Pre-request Script for Multiple Comments\r",
													"\r",
													"// Generate a random string function\r",
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        var randomTitle = \"Post \" + generateRandomString(5);\r",
													"        var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"\r",
													"                // Step 3: Create multiple comments authored by the user\r",
													"                var commentPromises = [];\r",
													"\r",
													"                for (var i = 0; i < 3; i++) {\r",
													"                    let randomComment = \"Comment \" + generateRandomString(5);\r",
													"\r",
													"                    commentPromises.push(new Promise((resolve, reject) => {\r",
													"                        pm.sendRequest({\r",
													"                            url: pm.globals.get(\"baseUrl\") + '/posts/' + postId + '/comments',\r",
													"                            method: 'POST',\r",
													"                            header: {\r",
													"                                'Content-Type': 'application/json',\r",
													"                                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                            },\r",
													"                            body: {\r",
													"                                mode: 'raw',\r",
													"                                raw: JSON.stringify({\r",
													"                                    content: randomComment,\r",
													"                                    authorId: userId\r",
													"                                })\r",
													"                            }\r",
													"                        }, function (err, res) {\r",
													"                            if (err) {\r",
													"                                console.log(\"Error creating comment:\", err);\r",
													"                                reject(err);\r",
													"                            } else {\r",
													"                                resolve();\r",
													"                            }\r",
													"                        });\r",
													"                    }));\r",
													"                }\r",
													"\r",
													"                Promise.all(commentPromises).then(() => {\r",
													"                    console.log(\"Three comments authored by the user created successfully.\");\r",
													"                }).catch((err) => {\r",
													"                    console.log(\"Error creating multiple comments:\", err);\r",
													"                });\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response contains multiple comments\r",
													"pm.test(\"Response contains multiple comments\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.be.an(\"array\").that.has.lengthOf(3);\r",
													"});\r",
													"\r",
													"// Test to check if each comment object has the correct properties\r",
													"pm.test(\"Each comment object has expected properties\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    jsonData.forEach(function (comment) {\r",
													"        pm.expect(comment).to.have.property(\"id\");\r",
													"        pm.expect(comment).to.have.property(\"content\");\r",
													"        pm.expect(comment).to.have.property(\"authorId\", parseInt(pm.collectionVariables.get(\"userId\")));\r",
													"        pm.expect(comment).to.have.property(\"postId\");\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/{{userId}}/comments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{userId}}",
												"comments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Returns a comment by ID for a post",
							"item": [
								{
									"name": "Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        var randomTitle = \"Post \" + generateRandomString(5);\r",
													"        var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"                pm.collectionVariables.set(\"postId\", postId);\r",
													"\r",
													"                // Step 3: Create a comment on the post\r",
													"                var randomComment = \"Comment \" + generateRandomString(5);\r",
													"\r",
													"                pm.sendRequest({\r",
													"                    url: pm.globals.get(\"baseUrl\") + '/posts/' + postId + '/comments',\r",
													"                    method: 'POST',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                    },\r",
													"                    body: {\r",
													"                        mode: 'raw',\r",
													"                        raw: JSON.stringify({\r",
													"                            content: randomComment,\r",
													"                            authorId: userId\r",
													"                        })\r",
													"                    }\r",
													"                }, function (err, res) {\r",
													"                    if (err) {\r",
													"                        console.log(\"Error creating comment:\", err);\r",
													"                    } else {\r",
													"                        var commentId = res.json().id;\r",
													"                        pm.collectionVariables.set(\"commentId\", commentId);\r",
													"                        console.log(\"Comment created successfully with ID:\", commentId);\r",
													"                    }\r",
													"                });\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response contains the correct comment object\r",
													"pm.test(\"Response contains the correct comment object\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"id\", parseInt(pm.collectionVariables.get(\"commentId\")));\r",
													"    pm.expect(jsonData).to.have.property(\"content\");\r",
													"    pm.expect(jsonData).to.have.property(\"authorId\", parseInt(pm.collectionVariables.get(\"userId\")));\r",
													"    pm.expect(jsonData).to.have.property(\"postId\", parseInt(pm.collectionVariables.get(\"postId\")));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}/comments/{{commentId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}",
												"comments",
												"{{commentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Doesnt Exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}/comments/999999",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}",
												"comments",
												"999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post doesnt exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts/999999/comments/{{commentId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"999999",
												"comments",
												"{{commentId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"packages": {},
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "DELETE",
					"item": [
						{
							"name": "Delete a user by ID",
							"item": [
								{
									"name": "Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"        console.log(\"User created successfully with ID:\", userId);\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 204\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
													"});\r",
													"\r",
													"// Verify that the user has been deleted\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users/' + pm.collectionVariables.get(\"userId\"),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error verifying user deletion:\", err);\r",
													"    } else {\r",
													"        pm.test(\"User should no longer exist\", function () {\r",
													"            pm.expect(res.code).to.equal(404);\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/{{userId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User doesnt exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Test for not found response\r",
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/999999",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"        console.log(\"User created successfully with ID:\", userId);\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "BadKey",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-API-KEY",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/users/{{userId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{userId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete a post by ID",
							"item": [
								{
									"name": "Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        var randomTitle = \"Post \" + generateRandomString(5);\r",
													"        var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"                pm.collectionVariables.set(\"postId\", postId);\r",
													"                console.log(\"Post created successfully with ID:\", postId);\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 204\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
													"});\r",
													"\r",
													"// Verify that the post has been deleted\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/posts/' + pm.collectionVariables.get(\"postId\"),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    pm.test(\"Post should no longer exist\", function () {\r",
													"        pm.expect(res.code).to.equal(404);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Doesnt Exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts/999999",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        var randomTitle = \"Post \" + generateRandomString(5);\r",
													"        var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"                pm.collectionVariables.set(\"postId\", postId);\r",
													"                console.log(\"Post created successfully with ID:\", postId);\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "BadKey",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-API-KEY",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete a comment by ID",
							"item": [
								{
									"name": "Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        var randomTitle = \"Post \" + generateRandomString(5);\r",
													"        var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"                pm.collectionVariables.set(\"postId\", postId);\r",
													"\r",
													"                // Step 3: Create a comment on the post\r",
													"                var randomComment = \"Comment \" + generateRandomString(5);\r",
													"\r",
													"                pm.sendRequest({\r",
													"                    url: pm.globals.get(\"baseUrl\") + '/posts/' + postId + '/comments',\r",
													"                    method: 'POST',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                    },\r",
													"                    body: {\r",
													"                        mode: 'raw',\r",
													"                        raw: JSON.stringify({\r",
													"                            content: randomComment,\r",
													"                            authorId: userId\r",
													"                        })\r",
													"                    }\r",
													"                }, function (err, res) {\r",
													"                    if (err) {\r",
													"                        console.log(\"Error creating comment:\", err);\r",
													"                    } else {\r",
													"                        var commentId = res.json().id;\r",
													"                        pm.collectionVariables.set(\"commentId\", commentId);\r",
													"                        console.log(\"Comment created successfully with ID:\", commentId);\r",
													"                    }\r",
													"                });\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200 or 204\", function () {\r",
													"    pm.expect(pm.response.code).to.be.oneOf([200, 204]);\r",
													"});\r",
													"\r",
													"// Verify that the comment has been deleted\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/posts/' + pm.collectionVariables.get(\"postId\") + '/comments/' + pm.collectionVariables.get(\"commentId\"),\r",
													"    method: 'GET',\r",
													"    header: {\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    pm.test(\"Comment should no longer exist\", function () {\r",
													"        pm.expect(res.code).to.equal(404);\r",
													"    });\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}/comments/{{commentId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}",
												"comments",
												"{{commentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Comment doesnt exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}/comments/999999",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}",
												"comments",
												"999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post doesnt exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts/999999/comments/{{commentId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"999999",
												"comments",
												"{{commentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        var randomTitle = \"Post \" + generateRandomString(5);\r",
													"        var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"                pm.collectionVariables.set(\"postId\", postId);\r",
													"\r",
													"                // Step 3: Create a comment on the post\r",
													"                var randomComment = \"Comment \" + generateRandomString(5);\r",
													"\r",
													"                pm.sendRequest({\r",
													"                    url: pm.globals.get(\"baseUrl\") + '/posts/' + postId + '/comments',\r",
													"                    method: 'POST',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                    },\r",
													"                    body: {\r",
													"                        mode: 'raw',\r",
													"                        raw: JSON.stringify({\r",
													"                            content: randomComment,\r",
													"                            authorId: userId\r",
													"                        })\r",
													"                    }\r",
													"                }, function (err, res) {\r",
													"                    if (err) {\r",
													"                        console.log(\"Error creating comment:\", err);\r",
													"                    } else {\r",
													"                        var commentId = res.json().id;\r",
													"                        pm.collectionVariables.set(\"commentId\", commentId);\r",
													"                        console.log(\"Comment created successfully with ID:\", commentId);\r",
													"                    }\r",
													"                });\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}/comments/{{commentId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}",
												"comments",
												"{{commentId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "PUT",
					"item": [
						{
							"name": "Update a user by ID",
							"item": [
								{
									"name": "Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email for user creation\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Generate random username and email for update\r",
													"var updatedUsername = generateRandomString(8);\r",
													"var updatedEmail = updatedUsername + '@example.com';\r",
													"\r",
													"// Store the updated values in collection variables for later verification\r",
													"pm.collectionVariables.set(\"updatedUsername\", updatedUsername);\r",
													"pm.collectionVariables.set(\"updatedEmail\", updatedEmail);\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"        console.log(\"User created successfully with ID:\", userId);\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response contains updated user data\r",
													"pm.test(\"Response contains updated user data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"id\", parseInt(pm.collectionVariables.get(\"userId\")));\r",
													"    pm.expect(jsonData).to.have.property(\"username\", pm.collectionVariables.get(\"updatedUsername\"));\r",
													"    pm.expect(jsonData).to.have.property(\"email\", pm.collectionVariables.get(\"updatedEmail\"));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"{{updatedUsername}}\",\r\n  \"email\": \"{{updatedEmail}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{userId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{userId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "User doesnt exist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"{{updatedUsername}}\",\r\n  \"email\": \"{{updatedEmail}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/999999",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email for user creation\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Generate random username and email for update\r",
													"var updatedUsername = generateRandomString(8);\r",
													"var updatedEmail = updatedUsername + '@example.com';\r",
													"\r",
													"// Store the updated values in collection variables for later verification\r",
													"pm.collectionVariables.set(\"updatedUsername\", updatedUsername);\r",
													"pm.collectionVariables.set(\"updatedEmail\", updatedEmail);\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"        console.log(\"User created successfully with ID:\", userId);\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "BadKey",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-API-KEY",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"username\": \"{{updatedUsername}}\",\r\n  \"email\": \"{{updatedEmail}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/users/{{userId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"{{userId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update a post by ID",
							"item": [
								{
									"name": "Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email for user creation\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Generate random title and content for post creation\r",
													"var randomTitle = \"Post \" + generateRandomString(5);\r",
													"var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"// Generate random title and content for post update\r",
													"var updatedTitle = \"Updated Post \" + generateRandomString(5);\r",
													"var updatedContent = \"Updated content for post \" + generateRandomString(5);\r",
													"\r",
													"// Store the updated values in collection variables for later verification\r",
													"pm.collectionVariables.set(\"updatedTitle\", updatedTitle);\r",
													"pm.collectionVariables.set(\"updatedContent\", updatedContent);\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"                pm.collectionVariables.set(\"postId\", postId);\r",
													"                console.log(\"Post created successfully with ID:\", postId);\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response contains updated post data\r",
													"pm.test(\"Response contains updated post data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"id\", parseInt(pm.collectionVariables.get(\"postId\")));\r",
													"    pm.expect(jsonData).to.have.property(\"title\", pm.collectionVariables.get(\"updatedTitle\"));\r",
													"    pm.expect(jsonData).to.have.property(\"content\", pm.collectionVariables.get(\"updatedContent\"));\r",
													"    pm.expect(jsonData).to.have.property(\"authorId\", parseInt(pm.collectionVariables.get(\"userId\")));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{updatedTitle}}\",\r\n  \"content\": \"{{updatedContent}}\",\r\n  \"authorId\": {{userId}}\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post doesnt exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{updatedTitle}}\",\r\n  \"content\": \"{{updatedContent}}\",\r\n  \"authorId\": {{userId}}\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/999999",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email for user creation\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Generate random title and content for post creation\r",
													"var randomTitle = \"Post \" + generateRandomString(5);\r",
													"var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"// Generate random title and content for post update\r",
													"var updatedTitle = \"Updated Post \" + generateRandomString(5);\r",
													"var updatedContent = \"Updated content for post \" + generateRandomString(5);\r",
													"\r",
													"// Store the updated values in collection variables for later verification\r",
													"pm.collectionVariables.set(\"updatedTitle\", updatedTitle);\r",
													"pm.collectionVariables.set(\"updatedContent\", updatedContent);\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"                pm.collectionVariables.set(\"postId\", postId);\r",
													"                console.log(\"Post created successfully with ID:\", postId);\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"title\": \"{{updatedTitle}}\",\r\n  \"content\": \"{{updatedContent}}\",\r\n  \"authorId\": {{userId}}\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Update a comment by ID",
							"item": [
								{
									"name": "Success",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email for user creation\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Generate random title and content for post creation\r",
													"var randomTitle = \"Post \" + generateRandomString(5);\r",
													"var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"// Generate random content for comment creation\r",
													"var randomComment = \"Comment \" + generateRandomString(5);\r",
													"\r",
													"// Generate random content for comment update\r",
													"var updatedCommentContent = \"Updated comment \" + generateRandomString(5);\r",
													"\r",
													"// Store the updated values in collection variables for later verification\r",
													"pm.collectionVariables.set(\"updatedCommentContent\", updatedCommentContent);\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"                pm.collectionVariables.set(\"postId\", postId);\r",
													"\r",
													"                // Step 3: Create a comment on the post\r",
													"                pm.sendRequest({\r",
													"                    url: pm.globals.get(\"baseUrl\") + '/posts/' + postId + '/comments',\r",
													"                    method: 'POST',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                    },\r",
													"                    body: {\r",
													"                        mode: 'raw',\r",
													"                        raw: JSON.stringify({\r",
													"                            content: randomComment,\r",
													"                            authorId: userId\r",
													"                        })\r",
													"                    }\r",
													"                }, function (err, res) {\r",
													"                    if (err) {\r",
													"                        console.log(\"Error creating comment:\", err);\r",
													"                    } else {\r",
													"                        var commentId = res.json().id;\r",
													"                        pm.collectionVariables.set(\"commentId\", commentId);\r",
													"                        console.log(\"Comment created successfully with ID:\", commentId);\r",
													"                    }\r",
													"                });\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"\r",
													"// Test to check if the response contains updated comment data\r",
													"pm.test(\"Response contains updated comment data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"    pm.expect(jsonData).to.have.property(\"id\", parseInt(pm.collectionVariables.get(\"commentId\")));\r",
													"    pm.expect(jsonData).to.have.property(\"content\", pm.collectionVariables.get(\"updatedCommentContent\"));\r",
													"    pm.expect(jsonData).to.have.property(\"authorId\", parseInt(pm.collectionVariables.get(\"userId\")));\r",
													"    pm.expect(jsonData).to.have.property(\"postId\", parseInt(pm.collectionVariables.get(\"postId\")));\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"{{updatedCommentContent}}\",\r\n  \"authorId\": {{userId}}\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}/comments/{{commentId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}",
												"comments",
												"{{commentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Comment doesnt exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email for user creation\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Generate random title and content for post creation\r",
													"var randomTitle = \"Post \" + generateRandomString(5);\r",
													"var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"// Generate random content for comment creation\r",
													"var randomComment = \"Comment \" + generateRandomString(5);\r",
													"\r",
													"// Generate random content for comment update\r",
													"var updatedCommentContent = \"Updated comment \" + generateRandomString(5);\r",
													"\r",
													"// Store the updated values in collection variables for later verification\r",
													"pm.collectionVariables.set(\"updatedCommentContent\", updatedCommentContent);\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"                pm.collectionVariables.set(\"postId\", postId);\r",
													"\r",
													"                // Step 3: Create a comment on the post\r",
													"                pm.sendRequest({\r",
													"                    url: pm.globals.get(\"baseUrl\") + '/posts/' + postId + '/comments',\r",
													"                    method: 'POST',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                    },\r",
													"                    body: {\r",
													"                        mode: 'raw',\r",
													"                        raw: JSON.stringify({\r",
													"                            content: randomComment,\r",
													"                            authorId: userId\r",
													"                        })\r",
													"                    }\r",
													"                }, function (err, res) {\r",
													"                    if (err) {\r",
													"                        console.log(\"Error creating comment:\", err);\r",
													"                    } else {\r",
													"                        var commentId = res.json().id;\r",
													"                        pm.collectionVariables.set(\"commentId\", commentId);\r",
													"                        console.log(\"Comment created successfully with ID:\", commentId);\r",
													"                    }\r",
													"                });\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"{{updatedCommentContent}}\",\r\n  \"authorId\": {{userId}}\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}/comments/9999999",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}",
												"comments",
												"9999999"
											]
										}
									},
									"response": []
								},
								{
									"name": "Post doesnt exist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email for user creation\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Generate random title and content for post creation\r",
													"var randomTitle = \"Post \" + generateRandomString(5);\r",
													"var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"// Generate random content for comment creation\r",
													"var randomComment = \"Comment \" + generateRandomString(5);\r",
													"\r",
													"// Generate random content for comment update\r",
													"var updatedCommentContent = \"Updated comment \" + generateRandomString(5);\r",
													"\r",
													"// Store the updated values in collection variables for later verification\r",
													"pm.collectionVariables.set(\"updatedCommentContent\", updatedCommentContent);\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"                pm.collectionVariables.set(\"postId\", postId);\r",
													"\r",
													"                // Step 3: Create a comment on the post\r",
													"                pm.sendRequest({\r",
													"                    url: pm.globals.get(\"baseUrl\") + '/posts/' + postId + '/comments',\r",
													"                    method: 'POST',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                    },\r",
													"                    body: {\r",
													"                        mode: 'raw',\r",
													"                        raw: JSON.stringify({\r",
													"                            content: randomComment,\r",
													"                            authorId: userId\r",
													"                        })\r",
													"                    }\r",
													"                }, function (err, res) {\r",
													"                    if (err) {\r",
													"                        console.log(\"Error creating comment:\", err);\r",
													"                    } else {\r",
													"                        var commentId = res.json().id;\r",
													"                        pm.collectionVariables.set(\"commentId\", commentId);\r",
													"                        console.log(\"Comment created successfully with ID:\", commentId);\r",
													"                    }\r",
													"                });\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"{{updatedCommentContent}}\",\r\n  \"authorId\": {{userId}}\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/999999/comments/{{commentId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"999999",
												"comments",
												"{{commentId}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Unauthorized",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"function generateRandomString(length) {\r",
													"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
													"    var result = '';\r",
													"    for (var i = 0; i < length; i++) {\r",
													"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
													"    }\r",
													"    return result;\r",
													"}\r",
													"\r",
													"// Generate random username and email for user creation\r",
													"var randomUsername = generateRandomString(8);\r",
													"var randomEmail = randomUsername + '@example.com';\r",
													"\r",
													"// Generate random title and content for post creation\r",
													"var randomTitle = \"Post \" + generateRandomString(5);\r",
													"var randomContent = \"Content for post \" + generateRandomString(5);\r",
													"\r",
													"// Generate random content for comment creation\r",
													"var randomComment = \"Comment \" + generateRandomString(5);\r",
													"\r",
													"// Generate random content for comment update\r",
													"var updatedCommentContent = \"Updated comment \" + generateRandomString(5);\r",
													"\r",
													"// Store the updated values in collection variables for later verification\r",
													"pm.collectionVariables.set(\"updatedCommentContent\", updatedCommentContent);\r",
													"\r",
													"// Step 1: Create a user\r",
													"pm.sendRequest({\r",
													"    url: pm.globals.get(\"baseUrl\") + '/users',\r",
													"    method: 'POST',\r",
													"    header: {\r",
													"        'Content-Type': 'application/json',\r",
													"        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"    },\r",
													"    body: {\r",
													"        mode: 'raw',\r",
													"        raw: JSON.stringify({\r",
													"            username: randomUsername,\r",
													"            email: randomEmail\r",
													"        })\r",
													"    }\r",
													"}, function (err, res) {\r",
													"    if (err) {\r",
													"        console.log(\"Error creating user:\", err);\r",
													"    } else {\r",
													"        var userId = res.json().id;\r",
													"        pm.collectionVariables.set(\"userId\", userId);\r",
													"\r",
													"        // Step 2: Create a post for the user\r",
													"        pm.sendRequest({\r",
													"            url: pm.globals.get(\"baseUrl\") + '/posts',\r",
													"            method: 'POST',\r",
													"            header: {\r",
													"                'Content-Type': 'application/json',\r",
													"                'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"            },\r",
													"            body: {\r",
													"                mode: 'raw',\r",
													"                raw: JSON.stringify({\r",
													"                    title: randomTitle,\r",
													"                    content: randomContent,\r",
													"                    authorId: userId\r",
													"                })\r",
													"            }\r",
													"        }, function (err, res) {\r",
													"            if (err) {\r",
													"                console.log(\"Error creating post:\", err);\r",
													"            } else {\r",
													"                var postId = res.json().id;\r",
													"                pm.collectionVariables.set(\"postId\", postId);\r",
													"\r",
													"                // Step 3: Create a comment on the post\r",
													"                pm.sendRequest({\r",
													"                    url: pm.globals.get(\"baseUrl\") + '/posts/' + postId + '/comments',\r",
													"                    method: 'POST',\r",
													"                    header: {\r",
													"                        'Content-Type': 'application/json',\r",
													"                        'X-API-KEY': pm.collectionVariables.get(\"apiKey\")\r",
													"                    },\r",
													"                    body: {\r",
													"                        mode: 'raw',\r",
													"                        raw: JSON.stringify({\r",
													"                            content: randomComment,\r",
													"                            authorId: userId\r",
													"                        })\r",
													"                    }\r",
													"                }, function (err, res) {\r",
													"                    if (err) {\r",
													"                        console.log(\"Error creating comment:\", err);\r",
													"                    } else {\r",
													"                        var commentId = res.json().id;\r",
													"                        pm.collectionVariables.set(\"commentId\", commentId);\r",
													"                        console.log(\"Comment created successfully with ID:\", commentId);\r",
													"                    }\r",
													"                });\r",
													"            }\r",
													"        });\r",
													"    }\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "BadKey",
													"type": "string"
												},
												{
													"key": "key",
													"value": "X-API-KEY",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"{{updatedCommentContent}}\",\r\n  \"authorId\": {{userId}}\r\n}\r\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/posts/{{postId}}/comments/{{commentId}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"posts",
												"{{postId}}",
												"comments",
												"{{commentId}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"// Pre-request Script\r",
							"function generateRandomString(length) {\r",
							"    var chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\r",
							"    var result = '';\r",
							"    for (var i = 0; i < length; i++) {\r",
							"        result += chars.charAt(Math.floor(Math.random() * chars.length));\r",
							"    }\r",
							"    return result;\r",
							"}\r",
							"\r",
							"var randomUsername = generateRandomString(8);\r",
							"var randomEmail = randomUsername + '@example.com';\r",
							"const apiKey = pm.collectionVariables.get(\"apiKey\")\r",
							"\r",
							"pm.collectionVariables.set(\"randomUsername\", randomUsername);\r",
							"pm.collectionVariables.set(\"randomEmail\", randomEmail);\r",
							"pm.collectionVariables.set(\"X-API-KEY\", apiKey);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{apiKey}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-API-KEY",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "users",
			"value": "[{\"username\": \"flash\",\"name\": \"Barry Allen\",\"role\": \"Superhero\"},{\"username\": \"wonder_woman\",\"name\": \"Diana Prince\",\"role\":\"Superhero\"},{\"username\": \"batman\",\"name\": \"Bruce Wayne\",\"role\": \"Superhero\"}]"
		},
		{
			"key": "results",
			"value": "[]",
			"type": "string"
		},
		{
			"key": "successAPIUrl",
			"value": "https://postman-echo.com/post",
			"type": "string"
		},
		{
			"key": "failureAPIUrl",
			"value": "https://postman-echo.com/post",
			"type": "string"
		},
		{
			"key": "idx",
			"value": "0"
		},
		{
			"key": "username",
			"value": ""
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "role",
			"value": ""
		},
		{
			"key": "apiKey",
			"value": "044eb66a-a587-4fd4-8501-b40420ac8cdc"
		},
		{
			"key": "userId",
			"value": ""
		},
		{
			"key": "randomUsername",
			"value": ""
		},
		{
			"key": "randomEmail",
			"value": ""
		},
		{
			"key": "authorId",
			"value": ""
		},
		{
			"key": "commentId",
			"value": ""
		},
		{
			"key": "API_KEY",
			"value": "044eb66a-a587-4fd4-8501-b40420ac8cdc"
		},
		{
			"key": "X-API-KEY",
			"value": ""
		},
		{
			"key": "postId",
			"value": ""
		},
		{
			"key": "randomUsernameUpdate",
			"value": ""
		},
		{
			"key": "randomEmailUpdate",
			"value": ""
		},
		{
			"key": "updatedUsername",
			"value": ""
		},
		{
			"key": "updatedEmail",
			"value": ""
		},
		{
			"key": "updatedTitle",
			"value": ""
		},
		{
			"key": "updatedContent",
			"value": ""
		},
		{
			"key": "updatedCommentContent",
			"value": ""
		}
	]
}