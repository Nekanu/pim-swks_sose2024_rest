openapi: 3.0.3
info:
    title: PIM-SWKS SoSe2024 REST API
    description: PIM-SWKS SoSe2024 REST API
    version: 1.0.0
servers:
    -   url: 'http://127.0.0.1:{Port}/'
        description: Local development server
        variables:
            Port:
                enum:
                    - '18080'
                    - '28080'
                    - '38080'
                    - '8080'
                default: '18080'
                description: The port number (18080 - rest-jakarta, 28080 - rest-springboot, 38080 - rest-aspnet)
    -   url: 'https://pim-swks.nekanu.com/'
        description: Production server

tags:
    -   name: posts
        description: Operations on posts
    -   name: comments
        description: Operations on comments
    -   name: users
        description: Operations on users

components:
    securitySchemes:
        apikeyAuth:
            type: apiKey
            in: header
            name: X-API-KEY
    
    schemas:
        Post:
            type: object
            properties:
                id:
                    type: integer
                    format: uint64
                    readOnly: true
                    example: 1
                title:
                    type: string
                    minLength: 3
                    maxLength: 512
                    example: "Hello World"
                content:
                    type: string
                    format: markdown
                    example: "This is a post"
                authorId:
                    type: integer
                    format: uint64
                    example: 1
                    description: ID of the author of the post
        
        User:
            type: object
            properties:
                id:
                    type: integer
                    format: uint64
                    readOnly: true
                    minimum: 1
                    example: 1
                username:
                    type: string
                    pattern: "^[a-zA-Z0-9-_.]{3,64}$"
                    minLength: 3
                    maxLength: 64
                    example: "admin"
                email:
                    type: string
                    format: email
                    example: "email@example.com"
        Comment:
            type: object
            properties:
                id:
                    type: integer
                    format: uint64
                    readOnly: true
                    example: 1
                content:
                    type: string
                    example: "This is a comment"
                authorId:
                    type: integer
                    format: uint64
                    example: 1
                    description: ID of the author of the comment
                postId:
                    type: integer
                    format: uint64
                    example: 1
                    description: ID of the post the comment is for
    responses:
        UnauthorizedError:
            description: Unauthorized
            headers:
                WWW-Authenticate:
                    description: The authentication method that should be used
                    schema:
                        type: string
        ForbiddenError:
            description: Forbidden
        BadRequestError:
            description: Bad Request


paths:
    /posts:
        get:
            summary: Returns all posts
            operationId: getPosts
            tags:
                - posts
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Post'
        post:
            summary: Create a new post
            operationId: createPost
            tags:
                - posts
            security:
                -   apikeyAuth: [ ]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Post'
            responses:
                '201':
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Post'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '403':
                    $ref: '#/components/responses/ForbiddenError'
    /posts/{id}:
        get:
            summary: Returns a post by ID
            operationId: getPostById
            tags:
                - posts
            parameters:
                -   name: id
                    in: path
                    required: true
                    description: ID of the post to return
                    schema:
                        type: integer
                        format: int64
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Post'
        put:
            summary: Update a post by ID
            operationId: updatePostById
            tags:
                - posts
            security:
                -   apikeyAuth: [ ]
            parameters:
                -   name: id
                    in: path
                    required: true
                    description: ID of the post to update
                    schema:
                        type: integer
                        format: int64
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Post'
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Post'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '403':
                    $ref: '#/components/responses/ForbiddenError'
        delete:
            summary: Delete a post by ID
            operationId: deletePostById
            tags:
                - posts
            security:
                -   apikeyAuth: [ ]
            parameters:
                -   name: id
                    in: path
                    required: true
                    description: ID of the post to delete
                    schema:
                        type: integer
                        format: int64
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Post'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '403':
                    $ref: '#/components/responses/ForbiddenError'
    
    /users:
        get:
            summary: Returns all users
            operationId: getUsers
            tags:
                - users
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/User'
        post:
            summary: Create a new user
            operationId: createUser
            tags:
                - users
            security:
                -   apikeyAuth: [ ]
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            responses:
                '201':
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '403':
                    $ref: '#/components/responses/ForbiddenError'
    
    /users/{id}:
        get:
            summary: Returns a user by ID
            operationId: getUserById
            tags:
                - users
            parameters:
                -   name: id
                    in: path
                    required: true
                    description: ID of the user to return
                    schema:
                        type: integer
                        format: int64
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
        put:
            summary: Update a user by ID
            operationId: updateUserById
            tags:
                - users
            security:
                -   apikeyAuth: [ ]
            parameters:
                -   name: id
                    in: path
                    required: true
                    description: ID of the user to update
                    schema:
                        type: integer
                        format: int64
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User'
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '403':
                    $ref: '#/components/responses/ForbiddenError'
        delete:
            summary: Delete a user by ID
            operationId: deleteUserById
            tags:
                - users
            security:
                -   apikeyAuth: [ ]
            parameters:
                -   name: id
                    in: path
                    required: true
                    description: ID of the user to delete
                    schema:
                        type: integer
                        format: int64
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '403':
                    $ref: '#/components/responses/ForbiddenError'
    
    /posts/{id}/comments:
        get:
            summary: Returns all comments for a post
            operationId: getCommentsForPost
            tags:
                - comments
            parameters:
                -   name: id
                    in: path
                    required: true
                    description: ID of the post to return comments for
                    schema:
                        type: integer
                        format: int64
                -   name: limit
                    in: query
                    required: false
                    description: Maximum number of comments to return
                    schema:
                        type: integer
                        format: int32
                        minimum: 1
                        maximum: 100
                        default: 50
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Comment'
        post:
            summary: Create a new comment for a post
            operationId: createCommentForPost
            tags:
                - comments
            security:
                -   apikeyAuth: [ ]
            parameters:
                -   name: id
                    in: path
                    required: true
                    description: ID of the post to create a comment for
                    schema:
                        type: integer
                        format: int64
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Comment'
            responses:
                '201':
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Comment'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '403':
                    $ref: '#/components/responses/ForbiddenError'
    
    /posts/{postId}/comments/{commentId}:
        get:
            summary: Returns a comment by ID for a post
            operationId: getCommentForPostById
            tags:
                - comments
            parameters:
                -   name: postId
                    in: path
                    required: true
                    description: ID of the post to return a comment for
                    schema:
                        type: integer
                        format: int64
                -   name: commentId
                    in: path
                    required: true
                    description: ID of the comment to return
                    schema:
                        type: integer
                        format: int64
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Comment'
        put:
            summary: Update a comment by ID for a post
            operationId: updateCommentForPostById
            tags:
                - comments
            security:
                -   apikeyAuth: [ ]
            parameters:
                -   name: postId
                    in: path
                    required: true
                    description: ID of the post to update a comment for
                    schema:
                        type: integer
                        format: int64
                -   name: commentId
                    in: path
                    required: true
                    description: ID of the comment to update
                    schema:
                        type: integer
                        format: int64
            requestBody:
                required: true
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Comment'
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Comment'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '403':
                    $ref: '#/components/responses/ForbiddenError'
        delete:
            summary: Delete a comment by ID for a post
            operationId: deleteCommentForPostById
            tags:
                - comments
            security:
                -   apikeyAuth: [ ]
            parameters:
                -   name: postId
                    in: path
                    required: true
                    description: ID of the post to delete a comment for
                    schema:
                        type: integer
                        format: int64
                -   name: commentId
                    in: path
                    required: true
                    description: ID of the comment to delete
                    schema:
                        type: integer
                        format: int64
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Comment'
                '401':
                    $ref: '#/components/responses/UnauthorizedError'
                '403':
                    $ref: '#/components/responses/ForbiddenError'

    /users/{id}/comments:
        get:
            summary: Returns all comments authored by this user
            operationId: getCommentsForUser
            tags:
                - comments
                - users
            parameters:
                -   name: id
                    in: path
                    required: true
                    description: ID of the user to return comments for
                    schema:
                        type: integer
                        format: int64
            responses:
                '200':
                    description: OK
                    content:
                        application/json:
                            schema:
                                type: array
                                items:
                                    $ref: '#/components/schemas/Comment'
