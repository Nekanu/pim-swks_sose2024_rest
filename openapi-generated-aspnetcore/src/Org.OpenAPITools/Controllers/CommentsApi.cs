/*
 * PIM-SWKS SoSe2024 REST API
 *
 * PIM-SWKS SoSe2024 REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CommentsApiController : ControllerBase
    { 
        /// <summary>
        /// Create a new comment for a post
        /// </summary>
        /// <param name="id">ID of the post to create a comment for</param>
        /// <param name="comment"></param>
        /// <response code="201">Created</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">If the post does not exist</response>
        [HttpPost]
        [Route("/posts/{id}/comments")]
        [Authorize(Policy = "apikeyAuth")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateCommentForPost")]
        [SwaggerResponse(statusCode: 201, type: typeof(Comment), description: "Created")]
        public virtual IActionResult CreateCommentForPost([FromRoute (Name = "id")][Required]long id, [FromBody]Comment comment)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Comment));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : 1,\n  \"postId\" : 1,\n  \"authorId\" : 1,\n  \"content\" : \"This is a comment\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Comment>(exampleJson)
            : default(Comment);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete a comment by ID for a post
        /// </summary>
        /// <param name="postId">ID of the post to delete a comment for</param>
        /// <param name="commentId">ID of the comment to delete</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">If the post or comment does not exist</response>
        [HttpDelete]
        [Route("/posts/{postId}/comments/{commentId}")]
        [Authorize(Policy = "apikeyAuth")]
        [ValidateModelState]
        [SwaggerOperation("DeleteCommentForPostById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Comment), description: "OK")]
        public virtual IActionResult DeleteCommentForPostById([FromRoute (Name = "postId")][Required]long postId, [FromRoute (Name = "commentId")][Required]long commentId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Comment));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : 1,\n  \"postId\" : 1,\n  \"authorId\" : 1,\n  \"content\" : \"This is a comment\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Comment>(exampleJson)
            : default(Comment);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a comment by ID for a post
        /// </summary>
        /// <param name="postId">ID of the post to return a comment for</param>
        /// <param name="commentId">ID of the comment to return</param>
        /// <response code="200">OK</response>
        /// <response code="404">If the post or comment does not exist</response>
        [HttpGet]
        [Route("/posts/{postId}/comments/{commentId}")]
        [ValidateModelState]
        [SwaggerOperation("GetCommentForPostById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Comment), description: "OK")]
        public virtual IActionResult GetCommentForPostById([FromRoute (Name = "postId")][Required]long postId, [FromRoute (Name = "commentId")][Required]long commentId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Comment));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : 1,\n  \"postId\" : 1,\n  \"authorId\" : 1,\n  \"content\" : \"This is a comment\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Comment>(exampleJson)
            : default(Comment);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns all comments for a post
        /// </summary>
        /// <param name="id">ID of the post to return comments for</param>
        /// <param name="limit">Maximum number of comments to return</param>
        /// <response code="200">OK</response>
        /// <response code="404">If the post does not exist</response>
        [HttpGet]
        [Route("/posts/{id}/comments")]
        [ValidateModelState]
        [SwaggerOperation("GetCommentsForPost")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Comment>), description: "OK")]
        public virtual IActionResult GetCommentsForPost([FromRoute (Name = "id")][Required]long id, [FromQuery (Name = "limit")][Range(1, 100)]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Comment>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : 1,\n  \"postId\" : 1,\n  \"authorId\" : 1,\n  \"content\" : \"This is a comment\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Comment>>(exampleJson)
            : default(List<Comment>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns all comments authored by this user
        /// </summary>
        /// <param name="id">ID of the user to return comments for</param>
        /// <response code="200">OK</response>
        /// <response code="404">If the user does not exist</response>
        [HttpGet]
        [Route("/users/{id}/comments")]
        [ValidateModelState]
        [SwaggerOperation("GetCommentsForUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Comment>), description: "OK")]
        public virtual IActionResult GetCommentsForUser([FromRoute (Name = "id")][Required]long id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Comment>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : 1,\n  \"postId\" : 1,\n  \"authorId\" : 1,\n  \"content\" : \"This is a comment\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Comment>>(exampleJson)
            : default(List<Comment>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update a comment by ID for a post
        /// </summary>
        /// <param name="postId">ID of the post to update a comment for</param>
        /// <param name="commentId">ID of the comment to update</param>
        /// <param name="comment"></param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="403">Forbidden</response>
        /// <response code="404">If the post or comment does not exist</response>
        [HttpPut]
        [Route("/posts/{postId}/comments/{commentId}")]
        [Authorize(Policy = "apikeyAuth")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateCommentForPostById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Comment), description: "OK")]
        public virtual IActionResult UpdateCommentForPostById([FromRoute (Name = "postId")][Required]long postId, [FromRoute (Name = "commentId")][Required]long commentId, [FromBody]Comment comment)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Comment));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : 1,\n  \"postId\" : 1,\n  \"authorId\" : 1,\n  \"content\" : \"This is a comment\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Comment>(exampleJson)
            : default(Comment);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
